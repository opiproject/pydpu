# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backend_aio_pb2 as backend__aio__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class AioControllerServiceStub(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAioController = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/CreateAioController',
                request_serializer=backend__aio__pb2.CreateAioControllerRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )
        self.DeleteAioController = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/DeleteAioController',
                request_serializer=backend__aio__pb2.DeleteAioControllerRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateAioController = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/UpdateAioController',
                request_serializer=backend__aio__pb2.UpdateAioControllerRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )
        self.ListAioControllers = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/ListAioControllers',
                request_serializer=backend__aio__pb2.ListAioControllersRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.ListAioControllersResponse.FromString,
                )
        self.GetAioController = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/GetAioController',
                request_serializer=backend__aio__pb2.GetAioControllerRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioController.FromString,
                )
        self.AioControllerStats = channel.unary_unary(
                '/opi_api.storage.v1.AioControllerService/AioControllerStats',
                request_serializer=backend__aio__pb2.AioControllerStatsRequest.SerializeToString,
                response_deserializer=backend__aio__pb2.AioControllerStatsResponse.FromString,
                )


class AioControllerServiceServicer(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    def CreateAioController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAioController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAioController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAioControllers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAioController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AioControllerStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AioControllerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAioController': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAioController,
                    request_deserializer=backend__aio__pb2.CreateAioControllerRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
            'DeleteAioController': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAioController,
                    request_deserializer=backend__aio__pb2.DeleteAioControllerRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateAioController': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAioController,
                    request_deserializer=backend__aio__pb2.UpdateAioControllerRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
            'ListAioControllers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAioControllers,
                    request_deserializer=backend__aio__pb2.ListAioControllersRequest.FromString,
                    response_serializer=backend__aio__pb2.ListAioControllersResponse.SerializeToString,
            ),
            'GetAioController': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAioController,
                    request_deserializer=backend__aio__pb2.GetAioControllerRequest.FromString,
                    response_serializer=backend__aio__pb2.AioController.SerializeToString,
            ),
            'AioControllerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.AioControllerStats,
                    request_deserializer=backend__aio__pb2.AioControllerStatsRequest.FromString,
                    response_serializer=backend__aio__pb2.AioControllerStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'opi_api.storage.v1.AioControllerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AioControllerService(object):
    """Back End (network-facing) APIs. This service is for AIO generic kernel block device.
    """

    @staticmethod
    def CreateAioController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/CreateAioController',
            backend__aio__pb2.CreateAioControllerRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAioController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/DeleteAioController',
            backend__aio__pb2.DeleteAioControllerRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAioController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/UpdateAioController',
            backend__aio__pb2.UpdateAioControllerRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAioControllers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/ListAioControllers',
            backend__aio__pb2.ListAioControllersRequest.SerializeToString,
            backend__aio__pb2.ListAioControllersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAioController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/GetAioController',
            backend__aio__pb2.GetAioControllerRequest.SerializeToString,
            backend__aio__pb2.AioController.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AioControllerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/opi_api.storage.v1.AioControllerService/AioControllerStats',
            backend__aio__pb2.AioControllerStatsRequest.SerializeToString,
            backend__aio__pb2.AioControllerStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
